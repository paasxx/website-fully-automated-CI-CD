name: Destroy Infrastructure with Terraform

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Escolha o ambiente para destruir (ex: dev, staging, prod)'
        required: true
        default: 'dev'
      password:
        description: 'Senha para rodar o workflow manualmente'
        required: true
        type: string

jobs:
  infra_destroy:
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}

    steps:
      # Verifica se a senha está correta no dispatch manual
    - name: Check password (for manual dispatch)
      if: ${{ github.event_name == 'workflow_dispatch' }}
      run: |
        if [ "${{ github.event.inputs.password }}" != "${{ secrets.WORKFLOW_PASSWORD }}" ]; then
          echo "Senha incorreta!"
          exit 1
        fi
      shell: bash

    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.5.5

    - name: Terraform Init
      run: terraform init -var-file=${{ github.event.inputs.environment }}.tfvars
      working-directory: ./terraform/${{ github.event.inputs.environment }}

    - name: Listar estado do Terraform
      run: terraform state list
      working-directory: ./terraform/${{ github.event.inputs.environment }}

    - name: Terraform Plan
      run: terraform plan -target=module.infrastructure -var-file=dev.tfvars
      working-directory: ./terraform/${{ github.event.inputs.environment }}

    - name: Terraform Destroy
      run: terraform destroy -target=module.infrastructure -auto-approve -var-file=dev.tfvars
      working-directory: ./terraform/${{ github.event.inputs.environment }}

  https_dns_destroy:
    runs-on: ubuntu-latest
    needs: infra_destroy
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}

    steps:

    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.5.5

    - name: Terraform Init
      run: terraform init -var-file=${{ github.event.inputs.environment }}.tfvars
      working-directory: ./terraform/${{ github.event.inputs.environment }}

    - name: Listar estado do Terraform
      run: terraform state list
      working-directory: ./terraform/${{ github.event.inputs.environment }}

    - name: Terraform Plan
      run: terraform plan -target=module.hosted_zone_acm -var-file=dev.tfvars
      working-directory: ./terraform/${{ github.event.inputs.environment }}

    - name: Terraform Destroy
      run: terraform destroy -target=module.hosted_zone_acm -auto-approve -var-file=dev.tfvars
      working-directory: ./terraform/${{ github.event.inputs.environment }}


  # Job para destruir o bootstrap
  bootstrap_destroy:
    needs: https_dns_destroy  # Executa após o job principal de terraform
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Terraform for Bootstrap
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.5

      - name: Terraform Init (Bootstrap)
        run: terraform init
        working-directory: ./terraform/bootstrap-backend

        # Verificar o status da tabela DynamoDB antes de tentar deletá-la
      - name: Verificar status da tabela DynamoDB
        run: |
          aws dynamodb describe-table --table-name terraform-locks --region us-east-1
        working-directory: ./terraform/bootstrap-backend

      # Remover todos os itens da tabela DynamoDB
      - name: Remover todos os itens da tabela DynamoDB
        run: |
          aws dynamodb scan --table-name terraform-locks --attributes-to-get LockID --query "Items[].LockID.S" --output text --region us-east-1 | \
          xargs -I {} aws dynamodb delete-item --table-name terraform-locks --key '{"LockID": {"S": "{}"}}' --region us-east-1
        working-directory: ./terraform/bootstrap-backend

      # Deletar a tabela DynamoDB
      - name: Deletar tabela DynamoDB
        run: |
          aws dynamodb delete-table --table-name terraform-locks --region us-east-1
        working-directory: ./terraform/bootstrap-backend

      - name: Remover estado do Terraform do S3
        run: |
          aws s3 rm s3://meu-bucket-terraform-pedro-silveira/terraform.tfstate --region us-east-1 --debug
        working-directory: ./terraform/bootstrap-backend


      - name: Esvaziar todos os objetos do bucket S3
        run: |
          aws s3 rm s3://meu-bucket-terraform-pedro-silveira --recursive --region us-east-1
        working-directory: ./terraform/bootstrap-backend

      
      # Deletar o bucket S3
      - name: Deletar bucket S3
        run: |
          aws s3 rb s3://meu-bucket-terraform-pedro-silveira --force --region us-east-1
        working-directory: ./terraform/bootstrap-backend

      # Executa o destroy do bootstrap
      - name: Terraform Destroy (Bootstrap)
        run: terraform destroy -auto-approve
        working-directory: ./terraform/bootstrap-backend



