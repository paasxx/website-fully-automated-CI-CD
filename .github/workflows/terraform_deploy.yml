name: Deploy Infrastructure with Terraform

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Escolha o ambiente (ex: dev, staging, prod)'
        required: true
        default: 'dev'
      password:
        description: 'Senha para rodar o workflow manualmente'
        required: true
        type: string

jobs:
  # Etapa 1: Criar S3 e DynamoDB
  create_s3_and_dynamodb:
    runs-on: ubuntu-latest
    steps:
      - name: Check password (for manual dispatch)
        if: ${{ github.event_name == 'workflow_dispatch' }}
        run: |
          if [ "${{ github.event.inputs.password }}" != "${{ secrets.WORKFLOW_PASSWORD }}" ]; then
            echo "Senha incorreta!"
            exit 1
          fi
        shell: bash

      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.5

      - name: Terraform Init (Create S3 Bucket and DynamoDB Table)
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: "us-east-1"
        run: |
          echo 'resource "aws_s3_bucket" "meu_bucket_terraform" { bucket = "meu-bucket-terraform-pedro-silveira" }' > bucket.tf
          echo 'resource "aws_dynamodb_table" "terraform_locks" {
            name         = "terraform-locks"
            billing_mode = "PAY_PER_REQUEST"
            hash_key     = "LockID"
            attribute {
              name = "LockID"
              type = "S"
            }
          }' > dynamodb.tf
          terraform init -var-file=dev.tfvars
          terraform apply -auto-approve -var-file=dev.tfvars -target=aws_s3_bucket.meu_bucket_terraform -target=aws_dynamodb_table.terraform_locks
        working-directory: ./terraform/${{ github.event.inputs.environment }}

  # Etapa 2: Criar ACM e Route 53
  create_acm_and_route53:
    runs-on: ubuntu-latest
    needs: create_s3_and_dynamodb
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.5

      - name: Configurar backend S3 e DynamoDB
        run: |
          echo 'terraform {
            backend "s3" {
              bucket = "meu-bucket-terraform-pedro-silveira"
              key    = "terraform.tfstate"
              region = "us-east-1"
              dynamodb_table = "terraform-locks"
              encrypt = true
            }
          }' > backend.tf
          terraform fmt backend.tf
        working-directory: ./terraform/${{ github.event.inputs.environment }}

      - name: Terraform Init (ACM and Route 53)
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: terraform init -var-file=dev.tfvars
        working-directory: ./terraform/${{ github.event.inputs.environment }}

      - name: Terraform Format
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: terraform fmt -check
        working-directory: ./terraform/${{ github.event.inputs.environment }}

      - name: Terraform Plan (ACM and Route 53)
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: terraform plan -var-file=dev.tfvars -target=aws_acm_certificate.frontend_cert -target=aws_acm_certificate.backend_cert -target=aws_route53_zone.my_zone
        working-directory: ./terraform/${{ github.event.inputs.environment }}

      - name: Terraform Apply (ACM and Route 53)
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: terraform apply -auto-approve -var-file=dev.tfvars -target=aws_acm_certificate.frontend_cert -target=aws_acm_certificate.backend_cert -target=aws_route53_zone.my_zone
        working-directory: ./terraform/${{ github.event.inputs.environment }}

  print_terraform_outputs_and_state:
    runs-on: ubuntu-latest
    needs: create_acm_and_route53
    steps:
      - name: Refresh Terraform state
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: terraform refresh
        working-directory: ./terraform/${{ github.event.inputs.environment }}

      - name: Listar todos os outputs do Terraform
        run: terraform output
        working-directory: ./terraform/${{ github.event.inputs.environment }}

      - name: Imprimir estado completo do Terraform
        run: terraform show
        working-directory: ./terraform/${{ github.event.inputs.environment }}


  # Etapa 3: Verificar status do ACM e aguardar até que esteja ISSUED
  check_acm_status:
    runs-on: ubuntu-latest
    needs: print_terraform_outputs_and_state
    steps:
      - name: Check ACM Status
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          CERT_STATUS=$(aws acm describe-certificate --certificate-arn $(terraform output -raw acm_certificate_arn) --query 'Certificate.Status' --output text)
          while [ "$CERT_STATUS" != "ISSUED" ]; do
            echo "Certificado ainda não está ISSUED. Status atual: $CERT_STATUS"
            sleep 60 # Aguardar 1 minuto antes de verificar novamente
            CERT_STATUS=$(aws acm describe-certificate --certificate-arn $(terraform output -raw acm_certificate_arn) --query 'Certificate.Status' --output text)
          done
          echo "Certificado ACM está ISSUED. Continuando com o deploy."

  # Etapa 4: Provisionar o restante da infraestrutura
  terraform:
    runs-on: ubuntu-latest
    needs: check_acm_status
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.5

      - name: Configurar backend S3 e DynamoDB
        run: |
          echo 'terraform {
            backend "s3" {
              bucket = "meu-bucket-terraform-pedro-silveira"
              key    = "terraform.tfstate"
              region = "us-east-1"
              dynamodb_table = "terraform-locks"
              encrypt = true
            }
          }' > backend.tf
          terraform fmt backend.tf
        working-directory: ./terraform/${{ github.event.inputs.environment }}

      - name: Terraform Init (Com Backend)
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: terraform init -var-file=dev.tfvars
        working-directory: ./terraform/${{ github.event.inputs.environment }}

      - name: Terraform Format
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: terraform fmt -check
        working-directory: ./terraform/${{ github.event.inputs.environment }}

      - name: Terraform Plan
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: terraform plan -var-file=dev.tfvars
        working-directory: ./terraform/${{ github.event.inputs.environment }}

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging'
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: terraform apply -auto-approve -var-file=dev.tfvars -var "aws_region=${{ secrets.AWS_REGION }}"
        working-directory: ./terraform/${{ github.event.inputs.environment }}

  # Etapa 5: Build and Push Docker Images
  build_and_push:
    runs-on: ubuntu-latest
    needs: terraform
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Build and push backend Docker image
        run: |
          docker buildx build --platform linux/amd64 -f ./backend/DockerfileProd \
          -t ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/backend-repo:latest \
          --push ./backend

      - name: Build and push frontend Docker image
        run: |
          docker buildx build --platform linux/amd64 \
          -f ./frontend/DockerfileProd \
          -t ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/frontend-repo:latest \
          --push ./frontend