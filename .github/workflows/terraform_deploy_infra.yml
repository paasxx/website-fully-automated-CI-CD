name: Deploy Infrastructure

on:
    workflow_dispatch:
      inputs:
        environment:
          description: 'Escolha o ambiente (ex: dev, staging, prod)'
          required: true
          default: 'dev'
        password:
          description: 'Senha para rodar o workflow manualmente'
          required: true
          type: string

jobs:
  create_s3_and_dynamodb:
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}

    steps:
      - name: Check password (for manual dispatch)
        if: ${{ github.event_name == 'workflow_dispatch' }}
        run: |
          if [ "${{ github.event.inputs.password }}" != "${{ secrets.WORKFLOW_PASSWORD }}" ]; then
            echo "Senha incorreta!"
            exit 1
          fi
        shell: bash

      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.5

      - name: Terraform Apply (Create S3 Bucket and DynamoDB Table)
        run: |
            terraform init
            terraform apply -auto-approve -var-file=dev.tfvars
        working-directory: ./terraform/bootstrap-backend


  # Etapa 4: Provisionar o restante da infraestrutura
  terraform:
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
    needs: create_s3_and_dynamodb
    steps:
      - name: Check password (for manual dispatch)
        if: ${{ github.event_name == 'workflow_dispatch' }}
        run: |
          if [ "${{ github.event.inputs.password }}" != "${{ secrets.WORKFLOW_PASSWORD }}" ]; then
            echo "Senha incorreta!"
            exit 1
          fi
        shell: bash
    
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.5

      - name: Terraform Init (Com Backend)
        run: terraform init -var-file=dev.tfvars
        working-directory: ./terraform/${{ github.event.inputs.environment }}

      - name: Terraform Plan
        run: terraform plan -var-file=dev.tfvars -target=module.infrastructure
        working-directory: ./terraform/${{ github.event.inputs.environment }}


      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging'
        run: terraform apply -auto-approve -var-file=dev.tfvars -target=module.infrastructure
        working-directory: ./terraform/${{ github.event.inputs.environment }}


  print_terraform_outputs_and_state:
    runs-on: ubuntu-latest
    needs: terraform
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.5

      - name: Terraform Init
        run: terraform init -var-file=dev.tfvars
        working-directory: ./terraform/${{ github.event.inputs.environment }}

      - name: Listar todos os outputs do Terraform
        run: terraform output
        working-directory: ./terraform/${{ github.event.inputs.environment }}

      - name: Imprimir estado completo do Terraform
        run: terraform show
        working-directory: ./terraform/${{ github.event.inputs.environment }}

  # Etapa 5: Build and Push Docker Images
  build_and_push:
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
    needs: terraform
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push backend Docker image
        run: |
          docker buildx build --platform linux/amd64 -f ./backend/DockerfileProd \
          -t ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/backend-repo:latest \
          --push ./backend

      - name: Build and push frontend Docker image
        run: |
          docker buildx build --platform linux/amd64 \
          -f ./frontend/DockerfileProd \
          -t ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/frontend-repo:latest \
          --push ./frontend